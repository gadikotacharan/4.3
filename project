const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/musicdb', { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

app.use(bodyParser.json());

// Define the Song model
const Song = mongoose.model('Song', {
  _id:Number,
  albumName: String,
  movie: String,
  composer: String,
  year: Number,
});


// 1. GET all songs
app.get('/api/songs', async (req, res) => {
  try {
    const songs = await Song.find({});
    res.json(songs);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// 2. GET a song by ID
app.get('/api/songs/:id', async (req, res) => {
  const songId = req.params.id;
  try {
    const song = await Song.findById(songId);
    if (song) {
      res.json(song);
    } else {
      res.status(404).json({ error: 'Song not found' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// 3. POST a new song
app.post('/api/songs', async (req, res) => {
  try {
    const newSong = new Song(req.body);
    const savedSong = await newSong.save();
    res.json(savedSong);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// 4. PUT (update) a song
app.put('/api/songs/:id', async (req, res) => {
  const songId = req.params.id;
  try {
    const updatedSong = await Song.findByIdAndUpdate(songId, req.body, { new: true });
    if (updatedSong) {
      res.json(updatedSong);
    } else {
      res.status(404).json({ error: 'Song not found' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// 5. DELETE a song
app.delete('/api/songs/:id', async (req, res) => {
  const songId = req.params.id;
  try {
    const deletedSong = await Song.findByIdAndRemove(songId);
    if (deletedSong) {
      res.json(deletedSong);
    } else {
      res.status(404).json({ error: 'Song not found' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
